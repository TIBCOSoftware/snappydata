/*
 * Copyright (c) 2017-2019 TIBCO Software Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'scala'

compileScala.options.encoding = 'UTF-8'

// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.test.scala.srcDirs = [ 'src/test/java', 'src/test/scala', 'src/dunit/scala' ]
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = [ ]

dependencies {
  compile 'org.scala-lang:scala-library:' + scalaVersion
  compile 'org.scala-lang:scala-reflect:' + scalaVersion

  compile 'org.slf4j:slf4j-api:' + slf4jVersion
  compile 'org.slf4j:slf4j-log4j12:' + slf4jVersion
  compile 'org.slf4j:jcl-over-slf4j:' + slf4jVersion
  compile 'org.slf4j:jul-to-slf4j:' + slf4jVersion

  if (new File(rootDir, 'spark/build.gradle').exists()) {
    compile project(':snappy-spark:snappy-spark-unsafe_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-core_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-catalyst_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-hive_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-repl_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming-kafka-0.10_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql-kafka-0.10_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-mllib_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-yarn_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-graphx_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-hive-thriftserver_' + scalaBinaryVersion)
    if (rootProject.hasProperty('mesos')) {
      compile project(':snappy-spark:snappy-spark-mesos_' + scalaBinaryVersion)
    }

    testCompile project(path: ':snappy-spark:snappy-spark-sql_' + scalaBinaryVersion,
        configuration: 'testOutput')
  } else {
    compile 'io.snappydata:snappy-spark-unsafe_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-core_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-catalyst_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-sql_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-hive_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-repl_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-streaming_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-streaming-kafka-0.10_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-sql-kafka-0.10_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-mllib_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-yarn_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-graphx_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-hive-thriftserver_' + scalaBinaryVersion + ':' + snappySparkVersion
    if (rootProject.hasProperty('mesos')) {
      compile 'io.snappydata:snappy-spark-mesos_' + scalaBinaryVersion + ':' + snappySparkVersion
    }

    testCompile group: 'io.snappydata', name: 'snappy-spark-sql_' + scalaBinaryVersion,
                version: snappySparkVersion, classifier: 'tests'
  }

  compile (project(':snappy-core_' + scalaBinaryVersion)) {
    exclude(group: 'org.apache.spark', module: 'spark-unsafe_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-core_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-catalyst_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-hive_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-mllib_' + scalaBinaryVersion)
    exclude(group: 'org.eclipse.jetty', module: 'jetty-servlet')
  }
  testCompile (project(path: ':snappy-core_' + scalaBinaryVersion, configuration: 'testOutput')) {
    exclude(group: 'org.apache.spark', module: 'spark-unsafe_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-core_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-catalyst_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-hive_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-streaming-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-sql-kafka-0-10_' + scalaBinaryVersion)
    exclude(group: 'org.apache.spark', module: 'spark-mllib_' + scalaBinaryVersion)
    exclude(group: 'org.eclipse.jetty', module: 'jetty-servlet')
  }

  if (new File(rootDir, 'store/build.gradle').exists()) {
    testCompile project(path: ':snappy-store:snappydata-store-tools', configuration: 'testOutput')
  } else {
    testCompile group: 'io.snappydata', name: 'snappydata-store-tools', version: snappyStoreVersion, classifier: 'tests'
  }
  if (new File(rootDir, 'spark-jobserver/build.gradle').exists()) {
    compile project(':spark-jobserver_' + scalaBinaryVersion)
  } else {
    compile group: 'io.snappydata', name: 'spark-jobserver_' + scalaBinaryVersion, version: sparkJobServerVersion
  }
  // support AWS URLs
  compile(group: 'org.apache.hadoop', name: 'hadoop-aws', version: hadoopVersion) {
    exclude(group: 'asm', module: 'asm')
    exclude(group: 'org.codehaus.jackson', module: 'jackson-mapper-asl')
    exclude(group: 'org.ow2.asm', module: 'asm')
    exclude(group: 'org.apache.zookeeper', module: 'zookeeper')
    exclude(group: 'org.jboss.netty', module: 'netty')
    exclude(group: 'jline', module: 'jline')
    exclude(group: 'commons-logging', module: 'commons-logging')
    exclude(group: 'org.mockito', module: 'mockito-all')
    exclude(group: 'org.mortbay.jetty', module: 'servlet-api-2.5')
    exclude(group: 'javax.servlet', module: 'servlet-api')
    exclude(group: 'junit', module: 'junit')
    exclude(group: 'com.google.guava', module: 'guava')
    exclude(group: 'com.sun.jersey')
    exclude(group: 'com.sun.jersey.jersey-test-framework')
    exclude(group: 'com.sun.jersey.contribs')
    exclude(group: 'com.google.protobuf', module: 'protobuf-java')
    exclude(group: 'com.jcraft', module: 'jsch')
    exclude(group: 'org.apache.directory.server', module: 'apacheds-kerberos-codec')
    // exclude jumbo aws-java-sdk-bundle and only include individual modules used by hadoop-aws
    exclude(group: 'com.amazonaws', module: 'aws-java-sdk-bundle')
  }
  compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: awsSdkVersion
  compile group: 'com.amazonaws', name: 'aws-java-sdk-sts', version: awsSdkVersion
  compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: awsSdkVersion
  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: jacksonVersion

  compile "io.snappydata:spark-metrics:${snappySparkMetricsLibVersion}"

  // Support Azure URLs
  // Exclude some dependencies to avoid conflicts with other existing dependencies
  compile(group: 'org.apache.hadoop', name: 'hadoop-azure', version: hadoopVersion) {
    exclude(group: 'asm', module: 'asm')
    exclude(group: 'org.codehaus.jackson', module: 'jackson-mapper-asl')
    exclude(group: 'org.ow2.asm', module: 'asm')
    exclude(group: 'org.apache.zookeeper', module: 'zookeeper')
    exclude(group: 'org.jboss.netty', module: 'netty')
    exclude(group: 'jline', module: 'jline')
    exclude(group: 'commons-logging', module: 'commons-logging')
    exclude(group: 'org.mockito', module: 'mockito-all')
    exclude(group: 'org.mortbay.jetty', module: 'servlet-api-2.5')
    exclude(group: 'javax.servlet', module: 'servlet-api')
    exclude(group: 'junit', module: 'junit')
    exclude(group: 'com.google.guava', module: 'guava')
    exclude(group: 'com.sun.jersey')
    exclude(group: 'com.sun.jersey.jersey-test-framework')
    exclude(group: 'com.sun.jersey.contribs')
    exclude(group: 'com.google.protobuf', module: 'protobuf-java')
    exclude(group: 'com.jcraft', module: 'jsch')
    exclude(group: 'org.apache.directory.server', module: 'apacheds-kerberos-codec')
  }

  // support for ADLS (Azure Data Lake Storage)
  compile group: 'org.apache.hadoop', name: 'hadoop-azure-datalake', version: hadoopVersion

  compile (group: 'com.databricks', name:'spark-xml_2.11', version: sparkXmlVersion) {
    //exclude(group: 'org.scala-lang', module: 'scala-library')
  }
  compile (group: 'com.databricks', name:'spark-avro_2.11', version: sparkAvroVersion) {
    //exclude(group: 'org.scala-lang', module: 'scala-library')
    //exclude(group: 'org.apache.avro', module: 'avro')
  }
  compile(group:'com.google.cloud.bigdataoss', name:'gcs-connector', version: gcsHadoop3ConnectorVersion, classifier: 'shaded')

  testCompile project(':dunit')
  testCompile "org.eclipse.collections:eclipse-collections:${eclipseCollectionsVersion}"
  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:${scalatestVersion}"

  testRuntime project(':snappy-aqp_' + scalaBinaryVersion)
  testRuntime files("${projectDir}/../tests/common/src/main/resources")
  testRuntime "org.pegdown:pegdown:${pegdownVersion}"
}

// Creates the version properties file and writes it to the resources dir
task createVersionPropertiesFile(dependsOn: 'processResources') {
  def propertiesDir = file("${sourceSets.main.scala.outputDir}/io/snappydata")
  outputs.file "${propertiesDir}/SnappyDataVersion.properties"
  inputs.file "${rootProject.projectDir}/build.gradle"

  doLast {

    def props = [
      'Product-Name'      : productName,
      'Product-Version'   : version,
      'Build-Id'          : buildIdPrefix + buildNumber,
      'Build-Date'        : buildDate,
      'Build-Platform'    : osName.getName() + osVersion + osArch,
      'Build-Java-Version': jdkVersion,
      'Source-Date'       : sourceDate,
      'Source-Revision'   : commitId,
      'Source-Repository' : gitBranch,
    ]

   writeProperties(propertiesDir, 'SnappyDataVersion.properties',
        "Properties that control what version ${productName} will think it is. Changing these values may cause ${productName} to no longer function.", props)
  }
}

compileJava.dependsOn createVersionPropertiesFile

test.dependsOn ':cleanJUnit'
scalaTest {
  dependsOn ':cleanScalaTest'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
    environment 'TPCDS_SUITE': rootProject.hasProperty("tpcds")
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}
check.dependsOn test, scalaTest, dunitTest, dunitSecurityTest
if(rootProject.hasProperty('dataExtractor')) {
  check.dependsOn recoveryTest
}
archivesBaseName = 'snappydata-cluster_' + scalaBinaryVersion

/*
 * Copyright (c) 2017-2022 TIBCO Software Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'scala'

compileScala.options.encoding = 'UTF-8'

dependencies {
  compileOnly 'org.scala-lang:scala-library:' + scalaVersion
  compileOnly 'org.scala-lang:scala-reflect:' + scalaVersion

  compile("org.apache.thrift:libthrift:${thriftVersion}") {
    exclude(group: 'org.slf4j', module: 'slf4j-api')
  }

  // JDBC driver uses log4j 2.x, so include in the shadow jar
  shadowInclude "org.apache.logging.log4j:log4j-api:${log4j2Version}"
  shadowInclude "org.apache.logging.log4j:log4j-core:${log4j2Version}"
  shadowInclude "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"

  // always use stock spark so that snappy extensions don't get accidently
  // included here in snappy-jdbc code.
  if (System.properties.containsKey('ideaBuild') && new File(rootDir, 'spark/build.gradle').exists()) {
    compile project(':snappy-spark:snappy-spark-core_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-catalyst_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql_' + scalaBinaryVersion)
    compileOnly "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  } else {
    compileOnly("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-catalyst_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.eclipse.jetty:jetty-servlet:${jettyVersion}")
  }

  if (new File(rootDir, 'store/build.gradle').exists()) {
	compile project(':snappy-store:snappydata-store-client')
  } else {
	compile group: 'io.snappydata', name: 'snappydata-store-client', version: snappyStoreVersion
  }
}

scalaTest {
  dependsOn ':cleanScalaTest'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}

test.dependsOn ':cleanJUnit'
check.dependsOn test, scalaTest, dunitTest

archivesBaseName = 'snappydata-jdbc_' + scalaBinaryVersion
jar.archiveClassifier.set('only')

// shadowJar will act like the real jar for inclusion by applications
shadowJar {
  archiveClassifier.set('')

  configurations = [ project.configurations.runtimeClasspath, project.configurations.shadowInclude ]
  // avoid conflict with the 0.9.2 version in stock Spark
  relocate 'org.apache.thrift', 'io.snappydata.org.apache.thrift'
  relocate 'org.apache.spark.unsafe', 'io.snappydata.org.apache.spark.unsafe'

  mergeServiceFiles()
  exclude 'log4j.properties'
  exclude 'log4j2.properties'
  exclude 'console-log4j.properties'
  exclude 'console-log4j2.properties'
  exclude 'store-log4j.properties'
  exclude 'store-log4j2.properties'
  exclude 'io/snappydata/log4j/**'
  exclude '**/Log4j1Configurator*'

  if (rootProject.hasProperty('enablePublish')) {
    createdBy = vendorName
  } else {
    createdBy = System.getProperty('user.name')
  }
  manifest {
    attributes(
      'Manifest-Version'  : '1.0',
      'Created-By'        : createdBy,
      'Title'             : "snappydata-jdbc_${scalaBinaryVersion}",
      'Version'           : archiveVersion.get(),
      'Vendor'            : vendorName
    )
  }
}

// clear dependencies from shadowJar POM
if (rootProject.hasProperty('enablePublish')) {
  publishing.publications {
    maven(MavenPublication) {
      afterEvaluate {
        pom.withXml {
          def xmlNode = asNode()
          xmlNode.remove(xmlNode.get('dependencies'))
        }
      }
    }
  }
}

publishArtifacts.add(shadowJar)
